---

### **Step-by-Step Guide to Running MAVProxy as a System Service on Raspberry Pi**

#### **1. Install MAVProxy**
   - Ensure that MAVProxy is installed on your Raspberry Pi. Use the following command:
     ```bash
     pip install MAVProxy
     ```
   - Confirm the installation location of `mavproxy.py`:
     ```bash
     which mavproxy.py
     ```
   - Note the path, as you’ll need it for the systemd service file. For this guide, assume the path is `/home/kgrigor/.local/bin/mavproxy.py`.

#### **2. Set Up MAVProxy as a Systemd Service**
   - Create a systemd service file for MAVProxy:
     ```bash
     sudo nano /etc/systemd/system/mavproxy.service
     ```

   - Insert the following configuration into the file, customizing it based on your setup:
     ```ini
     [Unit]
     Description=MAVProxy Service
     After=network.target

     [Service]
     ExecStart=/home/kgrigor/.local/bin/mavproxy.py --master=/dev/ttyACM0 --baudrate 115200 --out <endpoint_1>:14550 --out <endpoint_2>:14550
     Restart=always
     User=kgrigor
     RestartSec=2

     [Install]
     WantedBy=multi-user.target
     ```

   - Replace `<endpoint_1>` and `<endpoint_2>` with the actual IP addresses for telemetry data. You can configure these as needed.

#### **3. Enable and Start the MAVProxy Service**
   - Reload the systemd manager configuration to recognize the new service:
     ```bash
     sudo systemctl daemon-reload
     ```

   - Enable the service to start on boot:
     ```bash
     sudo systemctl enable mavproxy.service
     ```

   - Start the MAVProxy service manually for the first time:
     ```bash
     sudo systemctl start mavproxy.service
     ```

#### **4. Check the Service Status**
   - To check if the service is running correctly, use:
     ```bash
     sudo systemctl status mavproxy.service
     ```
   - If everything is set up correctly, it should show the service as **active (running)**. If there’s an issue, systemd will provide diagnostic output.

#### **5. Restart on Failure**
   - The `Restart=always` directive in the service file ensures that MAVProxy will restart automatically if it stops unexpectedly. The `RestartSec=2` line specifies a 2-second delay before restarting.

#### **6. Testing and Debugging**
   - **Manual Test**: Run the `ExecStart` command directly in the terminal to ensure it works as expected before placing it in the service file.
   - **Logging**: Check the MAVProxy log or output logs if you encounter issues:
     ```bash
     journalctl -u mavproxy.service
     ```
   - **Adjusting Endpoint IPs Dynamically**:
     - Consider modifying the service file to source endpoint IPs dynamically or use a script to fetch them from a database and restart MAVProxy accordingly.

#### **7. Using MySQL to Store Endpoints**
   - If you need to retrieve endpoint IPs dynamically, you could set up a separate script or service that fetches the IPs from your MySQL database and updates the MAVProxy command, restarting the service as needed.

---

### **Additional Commands for Service Management**

- **Stop the Service**:
  ```bash
  sudo systemctl stop mavproxy.service
  ```
- **Restart the Service**:
  ```bash
  sudo systemctl restart mavproxy.service
  ```
- **Disable the Service** (if you no longer want it to start on boot):
  ```bash
  sudo systemctl disable mavproxy.service
  ```
